from random import randint
from pathlib import Path

from torch.utils.data.dataset import Dataset
from torchaudio.sox_effects import apply_effects_file

EFFECTS = [["channels", "1"], ["rate", "16000"], ["gain", "-3.0"]]

CLASSES = ['二',
           '零',
           '是',
           '八',
           '五',
           '四',
           '一',
           '七',
           '否',
           '三',
           '六',
           '九',
           'لا',
           'واحد',
           'ثمانية',
           'سبعة',
           'أربعة',
           'هَايْ',
           'صفر',
           'ثلاثة',
           'فَيَرفُكس',
           'تسعة',
           'خمسة',
           'ستة',
           'نعم',
           'إثنان',
           'pump',
           'saith',
           'naw',
           'un',
           'wyth',
           'pedwar',
           'tri',
           'sero',
           'chwech',
           'dau',
           'ნული',
           'სამი',
           'ხუთი',
           'ექვსი',
           'შვიდი',
           'ერთი',
           'არა',
           'დიახ',
           'ოთხი',
           'ცხრა',
           'ორი',
           'რვა',
           'ପାଞ୍ଚ',
           'ଆଠ',
           'ଦୁଇ',
           'ତିନି',
           'ଏକ',
           'ହଁ',
           'ଶୂନ',
           'ଚାରି',
           'ସାତ',
           'ଛଅ',
           'ନଅ',
           'ନା',
           'nove',
           'seis',
           'cinco',
           'zero',
           'dois',
           'três',
           'sim',
           'quatro',
           'oito',
           'Hey',
           'um',
           'Firefox',
           'não',
           'sete',
           'čtyři',
           'dva',
           'ne',
           'sedm',
           'ano',
           'jedna',
           'devět',
           'osm',
           'nula',
           'šest',
           'pět',
           'tři',
           'hayır',
           'sekiz',
           'dört',
           'sıfır',
           'beş',
           'altı',
           'iki',
           'yedi',
           'dokuz',
           'evet',
           'bir',
           'üç',
           'uno',
           'nueve',
           'siete',
           'no',
           'sí',
           'cero',
           'ocho',
           'dos',
           'cuatro',
           'tres',
           'แปด',
           'สอง',
           'ไม่',
           'ห้า',
           'เก้า',
           'ศูนย์',
           'ใช่',
           'ไฟร์ฟอกซ์',
           'สี่',
           'หนึ่ง',
           'สาม',
           'หก',
           'två',
           'fyra',
           'ja',
           'fem',
           'åtta',
           'nej',
           'sju',
           'sex',
           'tre',
           'ett',
           'noll',
           'nio',
           'eight',
           'yes',
           'five',
           'three',
           'two',
           'seven',
           'six',
           'nine',
           'one',
           'four',
           'акы',
           'ҩба',
           'хәба',
           'быжьба',
           'фба',
           'ааи',
           'ааба',
           'хԥа',
           'жәба',
           'мап',
           'акымзарак',
           'ԥшьба',
           'nol',
           'tujuh',
           'lima',
           'dua',
           'tiga',
           'enam',
           'tidak',
           'delapan',
           'empat',
           'iya',
           'sembilan',
           'satu',
           'жети',
           'жок',
           'тогуз',
           'бир',
           'ооба',
           'үч',
           'алты',
           'төрт',
           'сегиз',
           'эки',
           'нөл',
           'беш',
           'nul',
           'kvar',
           'du',
           'ses',
           'sep',
           'kvin',
           'unu',
           'naŭ',
           'jes',
           'ok',
           'eins',
           'vier',
           'nein',
           'sieben',
           'acht',
           'sechs',
           'nan',
           'fünf',
           'neun',
           'drei',
           'zwei',
           'Hei',
           'いち',
           'はち',
           'に',
           'れい',
           'さん',
           'ご',
           'し',
           'しち',
           'いいえ',
           'く',
           'ろく',
           'はい',
           'три',
           'пять',
           'четыре',
           'девять',
           'один',
           'два',
           'нет',
           'ноль',
           'восемь',
           'да',
           'шесть',
           'Эй',
           'семь',
           'ez',
           'bost',
           'hiru',
           'sei',
           'bi',
           'bat',
           'bai',
           'lau',
           'zortzi',
           'zazpi',
           'bederatzi',
           'எட்டு',
           'ஏழு',
           'இரண்டு',
           'ஃபயர்ஃபாக்ஸ்',
           'பூஜ்யம்',
           'இல்லை',
           'ஒன்று',
           'ஆறு',
           'ஐந்து',
           'ஹே',
           'ஆம்',
           'மூன்று',
           'ஒன்பது',
           'நான்கு',
           'dwa',
           'trzy',
           'dziewięć',
           'sześć',
           'pięć',
           'cztery',
           'osiem',
           'Hej',
           'jeden',
           'tak',
           'nie',
           'siedem',
           'sḍis',
           'sin',
           'kraḍ',
           'ih',
           'ilem',
           'ṭam',
           'sa',
           'semmus',
           'uhu',
           'kuẓ',
           'yiwen',
           'tẓa',
           'вуннӑ',
           'виҫҫӗ',
           'тӑваттӑ',
           'ҫук',
           'ҫиччӗ',
           'тӑххӑр',
           'пӗрре',
           'саккӑр',
           'пиллӗк',
           'ҫапла',
           'иккӗ',
           'улттӑ',
           'cinc',
           'vuit',
           'nou',
           'u',
           'sis',
           'Ei',
           'quatre',
           'set',
           'ttaano',
           'mukaaga',
           'musanvu',
           'emu',
           'ye',
           'bbiri',
           'munaana',
           'nedda',
           'ssatu',
           'nooti',
           'mwenda',
           'pemp',
           "c'hwec'h",
           'kabiri',
           'yego',
           'icyenda',
           'rimwe',
           'gatandatu',
           'umunani',
           'gatanu',
           'kane',
           'karindwi',
           'zeru',
           'oya',
           'gatatu',
           'биш',
           'юк',
           'Хей',
           'бер',
           'әйе',
           'өч',
           'дүрт',
           'ике',
           'җиде',
           'сигез',
           'тугыз',
           '係',
           '唔係',
           'ien',
           'trije',
           'sân',
           'twa',
           'fiif',
           'fjouwer',
           'njoggen',
           'nee',
           'één',
           'drie',
           'negen',
           'twee',
           'zes',
           'Hé',
           'vijf',
           'zeven',
           'cinq',
           'trois',
           'deux',
           'sept',
           'non',
           'neuf',
           'huit',
           'oui',
           'zéro']


class CommonVoiceBaseDataset(Dataset):
    """357-class common voice base dataset."""

    def __init__(self):
        self.class2index = {CLASSES[i]: i for i in range(len(CLASSES))}
        self.class_num = 357
        self.data = []

    def __getitem__(self, idx):
        class_name, audio_path = self.data[idx]
        wav, _ = apply_effects_file(str(audio_path), EFFECTS)
        wav = wav.squeeze(0).numpy()
        return wav, self.class2index[class_name]

    def __len__(self):
        return len(self.data)

    def collate_fn(self, samples):
        """Collate a mini-batch of data."""
        return zip(*samples)


class CommonVoiceDataset(CommonVoiceBaseDataset):
    """Training and validation dataset."""

    def __init__(self, data_list, **kwargs):
        super().__init__()

        data = [
            (class_name, audio_path)
            for _, audio_path, class_name in data_list
        ]

        # class_counts = {class_name: 0 for class_name in CLASSES}
        # print(class_counts)
        # for class_name, _ in data:
        #     class_counts[class_name] += 1
        #
        # sample_weights = [
        #     len(data) / class_counts[class_name] for class_name, _ in data
        # ]

        self.data = data
        # self.sample_weights = sample_weights

    def __getitem__(self, idx):
        wav, label = super().__getitem__(idx)

        #         # _silence_ audios are longer than 1 sec.
        #         if label == self.class2index["_silence_"]:
        #             random_offset = randint(0, len(wav) - 16000)
        #             wav = wav[random_offset: random_offset + 16000]

        return wav, label


class CommonVoiceTestingDataset(CommonVoiceBaseDataset):
    """Testing dataset."""

    def __init__(self, data_list, **kwargs):
        super().__init__()
        self.data = [
            (class_name, audio_path)
            for _, audio_path, class_name in data_list
        ]
